////////////////////////////////////////////////////////////////////////////////
//
// GRID FUNCTION
//
////////////////////////////////////////////////////////////////////////////////

// Set initial value to container
$max-columns: $columns;
$total-width: 100%;

// Utility function â€” you should never need to modify this
@function total-width($columns:$columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}


////////////////////////////////////////////////////////////////////////////////
//
// BASIC MIXINS
//
////////////////////////////////////////////////////////////////////////////////

// The micro clearfix
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
    *zoom:1;

    &:before,
    &:after {
        content:"";
        display:table;
    }
    &:after {
        clear:both;
    }
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}

@mixin container() {
    margin: 0 auto;
    @if $use-container-gutter == true {
        padding-left: $container-gutter;
        padding-right: $container-gutter;
    }
    @if $use-max-width == true {
        max-width: $max-width;
    }
    @if $use-grid-type == "static" {
        $total-width: total-width($columns);
    }
    @if $use-grid-type == "fluid" {
        width: $total-width;
    }

}

@mixin row() {
    display: block;
    margin: 0 $total-width*((($gutter-width*.5)/total-width($columns))*-1);
    @if $legacy-support == true {
        *width: $total-width*(($gutter-width + total-width($columns))/total-width($columns))-$correction;
        *margin: 0 $total-width*((($gutter-width*.5)/total-width($columns))*-1)-$correction;
    }
    @include clearfix();
}

@mixin column($x,$columns:$columns) {
    display: inline;
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / total-width($columns));
    margin: 0 $total-width*(($gutter-width*.5)/total-width($columns));
    @if $legacy-support == true {
        *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / total-width($columns))-$correction;
        *margin: 0 $total-width*(($gutter-width*.5)/total-width($columns))-$correction;
    }
}


////////////////////////////////////////////////////////////////////////////////
//
// MARGIN MIXINS
//
////////////////////////////////////////////////////////////////////////////////

@mixin push($offset: 1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin pull($offset: 1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin squish($offset: 1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / total-width($columns)) + $total-width*(($gutter-width*.5)/total-width($columns));
}

@mixin alpha() {
    margin-left: 0;
}

@mixin omega() {
    margin-right: 0;
}


////////////////////////////////////////////////////////////////////
//
// GRID SYSTEM CLASSES
//
////////////////////////////////////////////////////////////////////

@if $use-grids == true {

    // Base
    // -------------------------------

    .#{$class-container} {
        @include container();
    }

    .#{$class-row} {
        @include row();
    }

    @for $i from 1 through $columns {
        .#{$class-column}#{$i} {
            @include column($i)
        }
    }

    .full-width,
    .full {
        @include column(12);
    }

    // Grid Positioning
    // -------------------------------

    // Last Column
    .first,
    .alpha { @include alpha(); }

    // Last Column
    .last,
    .omega { @include omega(); }

    @if $use-offset == true {

        // Add Columns of empty space as margin before an element.
        @for $i from 1 through ($columns) {
            .#{$class-push}#{$i} {
                @include push($i);
            }
        }

        // Add Columns of empty space as margin after an element.
        @for $i from 1 through ($columns) {
            .#{$class-pull}#{$i} {
                @include pull($i);
            }
        }

        // Add Columns of empty space as margin after and before an element.
        @for $i from 1 through ($columns) {
            .#{$class-squish}#{$i} {
                @include squish($i);
            }
        }

        .centered {
            float: none;
            display: block;
            margin: 0px auto;
        }

    }

}


////////////////////////////////////////////////////////////////////////////////
//
// GRID SUPPORT
//
////////////////////////////////////////////////////////////////////////////////


// Import
@import "compass/layout/grid-background";
@import "compass/css3/background-origin";
@import "compass/css3/background-clip";

// Functions
@function column($context: $columns, $style: $use-grid-type) {
  @return if($style == static, $column-width, relative-width($column-width, $context));
}

@function gutter($context: $columns, $style: $use-grid-type) {
  @return if($style == static, $gutter-width, relative-width($gutter-width, $context));
}

@function relative-width($width, $context : $columns) {
  @return percentage($width / columns-width($context));
}

@function columns-width($columns: $columns) {
  @if round($columns) != $columns {
    @warn "Ambitious Grid System works better with integer columns. For partial-columns, you may need to finesse the math by hand using functions directly.";
  }
  @return ($columns * $column-width) + (if($columns >= 1, ceil($columns - 1), 0) * $gutter-width);
}

// Mixin
@mixin grid-background(){
  @include column-grid-background($columns, column(), gutter(), 0);
  @include background-origin(content-box);
  @include background-clip(content-box);
}

